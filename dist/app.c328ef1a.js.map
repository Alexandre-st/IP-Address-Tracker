{"version":3,"sources":["app.js"],"names":["api_key","URL","theIcon","L","icon","iconUrl","fetchIpAdress","fetch","then","response","json","ipAddress","resultIp","document","querySelector","innerText","ip","resultLocation","location","city","country","postalCode","resultTimezone","timezone","resultIsp","isp","latitude","lat","longitude","lng","mymap","setView","marker","addTo","search","addEventListener","evt","preventDefault","inputValue","value","map","tileLayer","attribution","maxZoom","id","tileSize","zoomOffset","accessToken"],"mappings":"AAAA,IAAMA,OAAO,GAAG,kCAAhB;AACA,IAAIC,GAAG,iDAA0CD,OAA1C,CAAP;AACA,IAAME,OAAO,GAAGC,CAAC,CAACC,IAAF,CAAO;AACrBC,EAAAA,OAAO,EAAE;AADY,CAAP,CAAhB;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1BC,EAAAA,KAAK,CAACN,GAAD,CAAL,CACCO,IADD,CACM,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,GADd,EAECF,IAFD,CAEM,UAACG,SAAD,EAAe;AACnB;AAEA;AACA,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,2BAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,SAAT,GAAqBJ,SAAS,CAACK,EAA/B;AAEA,QAAMC,cAAc,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,6BAAvB,CAAvB;AACAG,IAAAA,cAAc,CAACF,SAAf,aAA8BJ,SAAS,CAACO,QAAV,CAAmBC,IAAjD,eAA0DR,SAAS,CAACO,QAAV,CAAmBE,OAA7E,cAAwFT,SAAS,CAACO,QAAV,CAAmBG,UAA3G;AAEA,QAAMC,cAAc,GAAGT,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,CAAvB;AACAQ,IAAAA,cAAc,CAACP,SAAf,GAA2BJ,SAAS,CAACO,QAAV,CAAmBK,QAA9C;AAEA,QAAMC,SAAS,GAAGX,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAlB;AACAU,IAAAA,SAAS,CAACT,SAAV,GAAsBJ,SAAS,CAACc,GAAhC,CAdmB,CAgBnB;;AACA,QAAIC,QAAQ,GAAGf,SAAS,CAACO,QAAV,CAAmBS,GAAlC;AACA,QAAIC,SAAS,GAAGjB,SAAS,CAACO,QAAV,CAAmBW,GAAnC;AACAC,IAAAA,KAAK,CAACC,OAAN,CAAc,CAACL,QAAD,EAAWE,SAAX,CAAd;AACAzB,IAAAA,CAAC,CAAC6B,MAAF,CAAS,CAACN,QAAD,EAAWE,SAAX,CAAT,EAAgC;AAACxB,MAAAA,IAAI,EAAEF;AAAP,KAAhC,EAAiD+B,KAAjD,CAAuDH,KAAvD;AAED,GAxBD;AAyBD,CA1BD;;AA4BAxB,aAAa,IAEb;;AACA,IAAM4B,MAAM,GAAGrB,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAf;AACAoB,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,UAACC,GAAD,EAAS;AACxCA,EAAAA,GAAG,CAACC,cAAJ;AACA,MAAMC,UAAU,GAAGzB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,EAAgCyB,KAAnD;AACAtC,EAAAA,GAAG,iDAA0CD,OAA1C,wBAA+DsC,UAA/D,CAAH;AACAhC,EAAAA,aAAa;AACd,CALD,GAQA;;AACA,IAAMwB,KAAK,GAAG3B,CAAC,CAACqC,GAAF,CAAM,OAAN,EAAeT,OAAf,CAAuB,CAAC,MAAD,EAAS,CAAC,IAAV,CAAvB,EAAwC,EAAxC,CAAd;AACI5B,CAAC,CAACsC,SAAF,CAAY,oKAAZ,EAAkL;AAClLC,EAAAA,WAAW,EAAE,0JADqK;AAElLC,EAAAA,OAAO,EAAE,EAFyK;AAGlLC,EAAAA,EAAE,EAAE,oBAH8K;AAIlLC,EAAAA,QAAQ,EAAE,GAJwK;AAKlLC,EAAAA,UAAU,EAAE,CAAC,CALqK;AAMlLC,EAAAA,WAAW,EAAE;AANqK,CAAlL,EAODd,KAPC,CAOKH,KAPL","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["const api_key = \"at_jX9101ryTipwYFz7Gt1q6gEYN9Y70\";\nlet URL = `https://geo.ipify.org/api/v1?apiKey=${api_key}`;\nconst theIcon = L.icon({\n  iconUrl: './images/icon-location.svg'\n});\n\nconst fetchIpAdress = () => {\n  fetch(URL)\n  .then(response => response.json())\n  .then((ipAddress) => {\n    // console.log(ipAddress);\n\n    // To create a list of the data to show\n    const resultIp = document.querySelector('.search-content-address p');\n    resultIp.innerText = ipAddress.ip;\n\n    const resultLocation = document.querySelector('.search-content-location p ');\n    resultLocation.innerText = `${ipAddress.location.city}, ${ipAddress.location.country} ${ipAddress.location.postalCode}`;\n\n    const resultTimezone = document.querySelector('.search-content-timezone p');\n    resultTimezone.innerText = ipAddress.location.timezone;\n\n    const resultIsp = document.querySelector('.search-content-isp p');\n    resultIsp.innerText = ipAddress.isp;\n\n    // To add to the map, the good information for the map and add the icon location\n    let latitude = ipAddress.location.lat;\n    let longitude = ipAddress.location.lng;\n    mymap.setView([latitude, longitude]);\n    L.marker([latitude, longitude], {icon: theIcon}).addTo(mymap);\n\n  });\n};\n\nfetchIpAdress();\n\n// To search a new ip address\nconst search = document.querySelector('.search-arrow');\nsearch.addEventListener('click', (evt) => {\n  evt.preventDefault();\n  const inputValue = document.querySelector('input').value;\n  URL = `https://geo.ipify.org/api/v1?apiKey=${api_key}&ipAddress=${inputValue}`;\n  fetchIpAdress();\n});\n\n\n// To configure the map for the IP\nconst mymap = L.map('mapid').setView([51.505, -0.09], 13);\n    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibXNoZWxsZXk5MSIsImEiOiJja256M3JhbHowMjFuMzNwOTE5ODN4enJpIn0.6WYBfIPtzcbjvfQ1Y9fP5A', {\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n    maxZoom: 18,\n    id: 'mapbox/streets-v11',\n    tileSize: 512,\n    zoomOffset: -1,\n    accessToken: 'your.mapbox.access.token'\n}).addTo(mymap);\n"]}